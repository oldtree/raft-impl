// Code generated by protoc-gen-go. DO NOT EDIT.
// source: raft.proto

package raft

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Log struct {
	CurrentCommitID      int64    `protobuf:"varint,1,opt,name=currentCommitID" json:"currentCommitID,omitempty"`
	CurrentTermID        int64    `protobuf:"varint,2,opt,name=currentTermID" json:"currentTermID,omitempty"`
	Logdata              []byte   `protobuf:"bytes,3,opt,name=logdata,proto3" json:"logdata,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Log) Reset()         { *m = Log{} }
func (m *Log) String() string { return proto.CompactTextString(m) }
func (*Log) ProtoMessage()    {}
func (*Log) Descriptor() ([]byte, []int) {
	return fileDescriptor_raft_08460722c1ac5f43, []int{0}
}
func (m *Log) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Log.Unmarshal(m, b)
}
func (m *Log) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Log.Marshal(b, m, deterministic)
}
func (dst *Log) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Log.Merge(dst, src)
}
func (m *Log) XXX_Size() int {
	return xxx_messageInfo_Log.Size(m)
}
func (m *Log) XXX_DiscardUnknown() {
	xxx_messageInfo_Log.DiscardUnknown(m)
}

var xxx_messageInfo_Log proto.InternalMessageInfo

func (m *Log) GetCurrentCommitID() int64 {
	if m != nil {
		return m.CurrentCommitID
	}
	return 0
}

func (m *Log) GetCurrentTermID() int64 {
	if m != nil {
		return m.CurrentTermID
	}
	return 0
}

func (m *Log) GetLogdata() []byte {
	if m != nil {
		return m.Logdata
	}
	return nil
}

type LogEntry struct {
	Logentry             int64    `protobuf:"varint,1,opt,name=Logentry" json:"Logentry,omitempty"`
	Term                 int64    `protobuf:"varint,2,opt,name=Term" json:"Term,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogEntry) Reset()         { *m = LogEntry{} }
func (m *LogEntry) String() string { return proto.CompactTextString(m) }
func (*LogEntry) ProtoMessage()    {}
func (*LogEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_raft_08460722c1ac5f43, []int{1}
}
func (m *LogEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogEntry.Unmarshal(m, b)
}
func (m *LogEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogEntry.Marshal(b, m, deterministic)
}
func (dst *LogEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogEntry.Merge(dst, src)
}
func (m *LogEntry) XXX_Size() int {
	return xxx_messageInfo_LogEntry.Size(m)
}
func (m *LogEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_LogEntry.DiscardUnknown(m)
}

var xxx_messageInfo_LogEntry proto.InternalMessageInfo

func (m *LogEntry) GetLogentry() int64 {
	if m != nil {
		return m.Logentry
	}
	return 0
}

func (m *LogEntry) GetTerm() int64 {
	if m != nil {
		return m.Term
	}
	return 0
}

type HeartbeatRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HeartbeatRequest) Reset()         { *m = HeartbeatRequest{} }
func (m *HeartbeatRequest) String() string { return proto.CompactTextString(m) }
func (*HeartbeatRequest) ProtoMessage()    {}
func (*HeartbeatRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_raft_08460722c1ac5f43, []int{2}
}
func (m *HeartbeatRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HeartbeatRequest.Unmarshal(m, b)
}
func (m *HeartbeatRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HeartbeatRequest.Marshal(b, m, deterministic)
}
func (dst *HeartbeatRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HeartbeatRequest.Merge(dst, src)
}
func (m *HeartbeatRequest) XXX_Size() int {
	return xxx_messageInfo_HeartbeatRequest.Size(m)
}
func (m *HeartbeatRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HeartbeatRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HeartbeatRequest proto.InternalMessageInfo

type HeartbeatResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HeartbeatResponse) Reset()         { *m = HeartbeatResponse{} }
func (m *HeartbeatResponse) String() string { return proto.CompactTextString(m) }
func (*HeartbeatResponse) ProtoMessage()    {}
func (*HeartbeatResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_raft_08460722c1ac5f43, []int{3}
}
func (m *HeartbeatResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HeartbeatResponse.Unmarshal(m, b)
}
func (m *HeartbeatResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HeartbeatResponse.Marshal(b, m, deterministic)
}
func (dst *HeartbeatResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HeartbeatResponse.Merge(dst, src)
}
func (m *HeartbeatResponse) XXX_Size() int {
	return xxx_messageInfo_HeartbeatResponse.Size(m)
}
func (m *HeartbeatResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_HeartbeatResponse.DiscardUnknown(m)
}

var xxx_messageInfo_HeartbeatResponse proto.InternalMessageInfo

type VoteRequest struct {
	RequestNodeID        int64    `protobuf:"varint,1,opt,name=RequestNodeID" json:"RequestNodeID,omitempty"`
	LastCommitID         int64    `protobuf:"varint,2,opt,name=LastCommitID" json:"LastCommitID,omitempty"`
	LastTerm             int64    `protobuf:"varint,3,opt,name=LastTerm" json:"LastTerm,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VoteRequest) Reset()         { *m = VoteRequest{} }
func (m *VoteRequest) String() string { return proto.CompactTextString(m) }
func (*VoteRequest) ProtoMessage()    {}
func (*VoteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_raft_08460722c1ac5f43, []int{4}
}
func (m *VoteRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VoteRequest.Unmarshal(m, b)
}
func (m *VoteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VoteRequest.Marshal(b, m, deterministic)
}
func (dst *VoteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VoteRequest.Merge(dst, src)
}
func (m *VoteRequest) XXX_Size() int {
	return xxx_messageInfo_VoteRequest.Size(m)
}
func (m *VoteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VoteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VoteRequest proto.InternalMessageInfo

func (m *VoteRequest) GetRequestNodeID() int64 {
	if m != nil {
		return m.RequestNodeID
	}
	return 0
}

func (m *VoteRequest) GetLastCommitID() int64 {
	if m != nil {
		return m.LastCommitID
	}
	return 0
}

func (m *VoteRequest) GetLastTerm() int64 {
	if m != nil {
		return m.LastTerm
	}
	return 0
}

type VoteResponse struct {
	ResponseNodeID       int64    `protobuf:"varint,1,opt,name=ResponseNodeID" json:"ResponseNodeID,omitempty"`
	VoteState            int64    `protobuf:"varint,2,opt,name=VoteState" json:"VoteState,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VoteResponse) Reset()         { *m = VoteResponse{} }
func (m *VoteResponse) String() string { return proto.CompactTextString(m) }
func (*VoteResponse) ProtoMessage()    {}
func (*VoteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_raft_08460722c1ac5f43, []int{5}
}
func (m *VoteResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VoteResponse.Unmarshal(m, b)
}
func (m *VoteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VoteResponse.Marshal(b, m, deterministic)
}
func (dst *VoteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VoteResponse.Merge(dst, src)
}
func (m *VoteResponse) XXX_Size() int {
	return xxx_messageInfo_VoteResponse.Size(m)
}
func (m *VoteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_VoteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_VoteResponse proto.InternalMessageInfo

func (m *VoteResponse) GetResponseNodeID() int64 {
	if m != nil {
		return m.ResponseNodeID
	}
	return 0
}

func (m *VoteResponse) GetVoteState() int64 {
	if m != nil {
		return m.VoteState
	}
	return 0
}

type SnapshotRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SnapshotRequest) Reset()         { *m = SnapshotRequest{} }
func (m *SnapshotRequest) String() string { return proto.CompactTextString(m) }
func (*SnapshotRequest) ProtoMessage()    {}
func (*SnapshotRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_raft_08460722c1ac5f43, []int{6}
}
func (m *SnapshotRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SnapshotRequest.Unmarshal(m, b)
}
func (m *SnapshotRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SnapshotRequest.Marshal(b, m, deterministic)
}
func (dst *SnapshotRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SnapshotRequest.Merge(dst, src)
}
func (m *SnapshotRequest) XXX_Size() int {
	return xxx_messageInfo_SnapshotRequest.Size(m)
}
func (m *SnapshotRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SnapshotRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SnapshotRequest proto.InternalMessageInfo

type SnapshotResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SnapshotResponse) Reset()         { *m = SnapshotResponse{} }
func (m *SnapshotResponse) String() string { return proto.CompactTextString(m) }
func (*SnapshotResponse) ProtoMessage()    {}
func (*SnapshotResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_raft_08460722c1ac5f43, []int{7}
}
func (m *SnapshotResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SnapshotResponse.Unmarshal(m, b)
}
func (m *SnapshotResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SnapshotResponse.Marshal(b, m, deterministic)
}
func (dst *SnapshotResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SnapshotResponse.Merge(dst, src)
}
func (m *SnapshotResponse) XXX_Size() int {
	return xxx_messageInfo_SnapshotResponse.Size(m)
}
func (m *SnapshotResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SnapshotResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SnapshotResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Log)(nil), "Log")
	proto.RegisterType((*LogEntry)(nil), "LogEntry")
	proto.RegisterType((*HeartbeatRequest)(nil), "HeartbeatRequest")
	proto.RegisterType((*HeartbeatResponse)(nil), "HeartbeatResponse")
	proto.RegisterType((*VoteRequest)(nil), "VoteRequest")
	proto.RegisterType((*VoteResponse)(nil), "VoteResponse")
	proto.RegisterType((*SnapshotRequest)(nil), "SnapshotRequest")
	proto.RegisterType((*SnapshotResponse)(nil), "SnapshotResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SnapshotsClient is the client API for Snapshots service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SnapshotsClient interface {
	RequestSnapshot(ctx context.Context, in *SnapshotRequest, opts ...grpc.CallOption) (*SnapshotResponse, error)
}

type snapshotsClient struct {
	cc *grpc.ClientConn
}

func NewSnapshotsClient(cc *grpc.ClientConn) SnapshotsClient {
	return &snapshotsClient{cc}
}

func (c *snapshotsClient) RequestSnapshot(ctx context.Context, in *SnapshotRequest, opts ...grpc.CallOption) (*SnapshotResponse, error) {
	out := new(SnapshotResponse)
	err := c.cc.Invoke(ctx, "/Snapshots/RequestSnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SnapshotsServer is the server API for Snapshots service.
type SnapshotsServer interface {
	RequestSnapshot(context.Context, *SnapshotRequest) (*SnapshotResponse, error)
}

func RegisterSnapshotsServer(s *grpc.Server, srv SnapshotsServer) {
	s.RegisterService(&_Snapshots_serviceDesc, srv)
}

func _Snapshots_RequestSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnapshotsServer).RequestSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Snapshots/RequestSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnapshotsServer).RequestSnapshot(ctx, req.(*SnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Snapshots_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Snapshots",
	HandlerType: (*SnapshotsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestSnapshot",
			Handler:    _Snapshots_RequestSnapshot_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "raft.proto",
}

// LeaderElectionClient is the client API for LeaderElection service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LeaderElectionClient interface {
	RequestVote(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
}

type leaderElectionClient struct {
	cc *grpc.ClientConn
}

func NewLeaderElectionClient(cc *grpc.ClientConn) LeaderElectionClient {
	return &leaderElectionClient{cc}
}

func (c *leaderElectionClient) RequestVote(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/LeaderElection/RequestVote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LeaderElectionServer is the server API for LeaderElection service.
type LeaderElectionServer interface {
	RequestVote(context.Context, *VoteRequest) (*VoteResponse, error)
}

func RegisterLeaderElectionServer(s *grpc.Server, srv LeaderElectionServer) {
	s.RegisterService(&_LeaderElection_serviceDesc, srv)
}

func _LeaderElection_RequestVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaderElectionServer).RequestVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LeaderElection/RequestVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaderElectionServer).RequestVote(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LeaderElection_serviceDesc = grpc.ServiceDesc{
	ServiceName: "LeaderElection",
	HandlerType: (*LeaderElectionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestVote",
			Handler:    _LeaderElection_RequestVote_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "raft.proto",
}

// HeartBeatsClient is the client API for HeartBeats service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HeartBeatsClient interface {
	Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error)
}

type heartBeatsClient struct {
	cc *grpc.ClientConn
}

func NewHeartBeatsClient(cc *grpc.ClientConn) HeartBeatsClient {
	return &heartBeatsClient{cc}
}

func (c *heartBeatsClient) Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error) {
	out := new(HeartbeatResponse)
	err := c.cc.Invoke(ctx, "/HeartBeats/heartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HeartBeatsServer is the server API for HeartBeats service.
type HeartBeatsServer interface {
	Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error)
}

func RegisterHeartBeatsServer(s *grpc.Server, srv HeartBeatsServer) {
	s.RegisterService(&_HeartBeats_serviceDesc, srv)
}

func _HeartBeats_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeartBeatsServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/HeartBeats/Heartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeartBeatsServer).Heartbeat(ctx, req.(*HeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _HeartBeats_serviceDesc = grpc.ServiceDesc{
	ServiceName: "HeartBeats",
	HandlerType: (*HeartBeatsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "heartbeat",
			Handler:    _HeartBeats_Heartbeat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "raft.proto",
}

func init() { proto.RegisterFile("raft.proto", fileDescriptor_raft_08460722c1ac5f43) }

var fileDescriptor_raft_08460722c1ac5f43 = []byte{
	// 344 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x92, 0xcf, 0x6b, 0xea, 0x40,
	0x10, 0xc7, 0xf1, 0xf9, 0x78, 0xef, 0x39, 0xc6, 0x1f, 0x99, 0x77, 0x09, 0xa1, 0x07, 0x59, 0x4a,
	0x91, 0x1e, 0xf6, 0x60, 0xa1, 0x87, 0xd2, 0x43, 0xa9, 0x0a, 0x15, 0x42, 0x0f, 0x2a, 0xbd, 0xaf,
	0x3a, 0x55, 0x41, 0xb3, 0x76, 0x77, 0x3c, 0xf4, 0xbf, 0x2f, 0xd9, 0x6c, 0xd4, 0xc4, 0xdb, 0xcc,
	0x87, 0xc9, 0x7c, 0xbf, 0xdf, 0x9d, 0x00, 0x18, 0xf5, 0xc9, 0xf2, 0x60, 0x34, 0x6b, 0xa1, 0xa1,
	0x9e, 0xe8, 0x35, 0xf6, 0xa1, 0xb3, 0x3c, 0x1a, 0x43, 0x29, 0x0f, 0xf5, 0x7e, 0xbf, 0xe5, 0xc9,
	0x28, 0xaa, 0xf5, 0x6a, 0xfd, 0xfa, 0xb4, 0x8a, 0xf1, 0x16, 0x5a, 0x1e, 0xcd, 0xc9, 0xec, 0x27,
	0xa3, 0xe8, 0x97, 0x9b, 0x2b, 0x43, 0x8c, 0xe0, 0xef, 0x4e, 0xaf, 0x57, 0x8a, 0x55, 0x54, 0xef,
	0xd5, 0xfa, 0xc1, 0xb4, 0x68, 0xc5, 0x13, 0xfc, 0x4b, 0xf4, 0x7a, 0x9c, 0xb2, 0xf9, 0xc6, 0xd8,
	0xd5, 0x94, 0xd5, 0x5e, 0xee, 0xd4, 0x23, 0xc2, 0xef, 0x6c, 0x97, 0x5f, 0xef, 0x6a, 0x81, 0xd0,
	0x7d, 0x23, 0x65, 0x78, 0x41, 0x8a, 0xa7, 0xf4, 0x75, 0x24, 0xcb, 0xe2, 0x3f, 0x84, 0x17, 0xcc,
	0x1e, 0x74, 0x6a, 0x49, 0x58, 0x68, 0x7e, 0x68, 0x26, 0x3f, 0x93, 0x79, 0xf6, 0xe5, 0xbb, 0x5e,
	0xd1, 0x29, 0x5b, 0x19, 0xa2, 0x80, 0x20, 0x51, 0xf6, 0xfc, 0x00, 0xb9, 0x72, 0x89, 0x39, 0xc7,
	0xca, 0xba, 0x94, 0x2e, 0x58, 0xe6, 0xd8, 0xf7, 0x62, 0x0e, 0x41, 0x2e, 0x9a, 0x9b, 0xc0, 0x3b,
	0x68, 0x17, 0x75, 0x49, 0xb6, 0x42, 0xf1, 0x06, 0x1a, 0xd9, 0x77, 0x33, 0x56, 0x4c, 0x5e, 0xf4,
	0x0c, 0x44, 0x08, 0x9d, 0x59, 0xaa, 0x0e, 0x76, 0xa3, 0x4f, 0x91, 0x11, 0xba, 0x67, 0x94, 0xaf,
	0x1a, 0x0c, 0xa1, 0x51, 0x30, 0x8b, 0x8f, 0xd0, 0xf1, 0xb3, 0x05, 0xc3, 0xae, 0xac, 0x6c, 0x89,
	0x43, 0x79, 0xb5, 0xe4, 0x19, 0xda, 0x09, 0xa9, 0x15, 0x99, 0xf1, 0x8e, 0x96, 0xbc, 0xd5, 0x29,
	0xde, 0x43, 0xd3, 0xcf, 0x67, 0x8e, 0x30, 0x90, 0x17, 0xcf, 0x1a, 0xb7, 0xe4, 0x65, 0xde, 0xc1,
	0x0b, 0x80, 0xbb, 0xc4, 0x2b, 0x29, 0xb6, 0x38, 0x80, 0xc6, 0xa6, 0xb8, 0x0b, 0x86, 0xb2, 0x7a,
	0xb7, 0x18, 0xe5, 0xd5, 0xd9, 0x16, 0x7f, 0xdc, 0x3f, 0xf9, 0xf0, 0x13, 0x00, 0x00, 0xff, 0xff,
	0x24, 0x0b, 0xde, 0xc3, 0xa1, 0x02, 0x00, 0x00,
}
